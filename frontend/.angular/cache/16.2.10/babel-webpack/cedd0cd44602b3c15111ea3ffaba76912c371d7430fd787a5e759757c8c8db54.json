{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nexport class ChartService {\n  constructor() {\n    this.url = 'http://localhost:5000'; // your server local path\n    this.socket = io(this.url, {\n      transports: ['websocket', 'polling', 'flashsocket']\n    });\n  }\n  joinRoom(data) {\n    this.socket.emit('join', data);\n  }\n  sendMessage(data) {\n    this.socket.emit('message', data);\n  }\n  getMessage() {\n    return new Observable(observer => {\n      this.socket.on('new message', data => {\n        console.log(data);\n        observer.next(data);\n      });\n      return () => {\n        this.socket.disconnect();\n      };\n    });\n  }\n  getStorage() {\n    const storage = localStorage.getItem('chats');\n    return storage ? JSON.parse(storage) : [];\n  }\n  setStorage(data) {\n    localStorage.setItem('chats', JSON.stringify(data));\n  }\n  static #_ = this.ɵfac = function ChartService_Factory(t) {\n    return new (t || ChartService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChartService,\n    factory: ChartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","io","ChartService","constructor","url","socket","transports","joinRoom","data","emit","sendMessage","getMessage","observer","on","console","log","next","disconnect","getStorage","storage","localStorage","getItem","JSON","parse","setStorage","setItem","stringify","_","_2","factory","ɵfac","providedIn"],"sources":["/home/devngecu/Desktop/The_Jitu_Training/talky/frontend/src/app/chart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { io, Socket } from 'socket.io-client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n\n \n  private socket: Socket;\n  private url = 'http://localhost:5000'; // your server local path\n\n  constructor() {\n    this.socket = io(this.url, {transports: ['websocket', 'polling', 'flashsocket']});\n  }\n\n  joinRoom(data:any): void {\n    this.socket.emit('join', data);\n  }\n\n  sendMessage(data:any): void {\n    this.socket.emit('message', data);\n  }\n\n  getMessage(): Observable<any> {\n    return new Observable<{user: string, message: string}>(observer => {\n      \n      this.socket.on('new message', (data) => {\n      console.log(data);\n\n        observer.next(data);\n      });\n\n      return () => {\n        this.socket.disconnect();\n      }\n    });\n  }\n\n  getStorage() {\n    const storage: any = localStorage.getItem('chats');\n    return storage ? JSON.parse(storage) : [];\n  }\n\n  setStorage(data:any) {\n    localStorage.setItem('chats', JSON.stringify(data));\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,EAAE,QAAgB,kBAAkB;;AAK7C,OAAM,MAAOC,YAAY;EAMvBC,YAAA;IAFQ,KAAAC,GAAG,GAAG,uBAAuB,CAAC,CAAC;IAGrC,IAAI,CAACC,MAAM,GAAGJ,EAAE,CAAC,IAAI,CAACG,GAAG,EAAE;MAACE,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,aAAa;IAAC,CAAC,CAAC;EACnF;EAEAC,QAAQA,CAACC,IAAQ;IACf,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,MAAM,EAAED,IAAI,CAAC;EAChC;EAEAE,WAAWA,CAACF,IAAQ;IAClB,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,SAAS,EAAED,IAAI,CAAC;EACnC;EAEAG,UAAUA,CAAA;IACR,OAAO,IAAIX,UAAU,CAAkCY,QAAQ,IAAG;MAEhE,IAAI,CAACP,MAAM,CAACQ,EAAE,CAAC,aAAa,EAAGL,IAAI,IAAI;QACvCM,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;QAEfI,QAAQ,CAACI,IAAI,CAACR,IAAI,CAAC;MACrB,CAAC,CAAC;MAEF,OAAO,MAAK;QACV,IAAI,CAACH,MAAM,CAACY,UAAU,EAAE;MAC1B,CAAC;IACH,CAAC,CAAC;EACJ;EAEAC,UAAUA,CAAA;IACR,MAAMC,OAAO,GAAQC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAClD,OAAOF,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC,GAAG,EAAE;EAC3C;EAEAK,UAAUA,CAAChB,IAAQ;IACjBY,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAAClB,IAAI,CAAC,CAAC;EACrD;EAAC,QAAAmB,CAAA,G;qBAxCUzB,YAAY;EAAA;EAAA,QAAA0B,EAAA,G;WAAZ1B,YAAY;IAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}